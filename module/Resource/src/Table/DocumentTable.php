<?php
/**
 * @access protected
 * @author Judzhin Miles <info[woof-woof]msbios.com>
 */
namespace Kubnete\Resource\Table;

use Kubnete\Resource\Model\Document;
use Kubnete\Resource\Tables;
use Zend\Db\ResultSet\ResultSet;
use Zend\Db\Sql\Predicate\Predicate;
use Zend\Db\Sql\Predicate\PredicateSet;
use Zend\Db\Sql\Select;
use Zend\Paginator\Adapter\DbSelect;
use Zend\Paginator\Paginator;

/**
 * Class DocumentTable
 * @package Kubnete\Resource\Table
 */
class DocumentTable extends AbstractResourceTable
{
    /**
     * @param Document $document
     * @param bool $paginated
     */
    public function fetchAllByDocument(Document $document, $paginated = false)
    {

        if ($paginated) {
        }

        return $this->tableGateway->select([
            'parent_id' => $document['id']
        ]);
    }

    /**
     * @param bool $paginated
     * @return ResultSet|Paginator
     */
    public function fetchAll($paginated = false)
    {
        if ($paginated) {
            // create a new Select object for the table album
            /** @var Select $select */
            $select = new Select($this->tableGateway->getTable());
            // create a new result set based on the Album entity
            /** @var ResultSet $resultSetPrototype */
            $resultSetPrototype = new ResultSet;
            $resultSetPrototype->setArrayObjectPrototype(new Document);
            // create a new pagination adapter object
            /** @var DbSelect $paginatorAdapter */
            $paginatorAdapter = new DbSelect(
                // our configured select object
                $select,
                // the adapter to run it against
                $this->tableGateway->getAdapter(),
                // the result set to hydrate
                $resultSetPrototype
            );
            /** @var Paginator $paginator */
            $paginator = new Paginator($paginatorAdapter);
            return $paginator;
        }

        return parent::fetchAll(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $uri
     * @param null $ancestor
     * @return array|\ArrayObject|null
     */
    public function findByUriAndAncestor($uri, $ancestor = null)
    {
        /** @var ResultSet $resultSet */
        $resultSet = $this->getTableGateway()
            ->select(function (Select $select) use ($uri, $ancestor) {
                $select->join(
                    ['d' => Tables::CNT_T_DOCUMENTS],
                    sprintf('d.id = %s.parent_id', Tables::CNT_T_DOCUMENTS),
                    ['aid' => 'id', 'ancestor' => 'uri'],
                    Select::JOIN_LEFT
                );
                $select->join(
                    ['l' => Tables::SYS_T_TEMPLATES],
                    sprintf('l.id = %s.layout_id', Tables::CNT_T_DOCUMENTS),
                    ['layout' => 'identifier'],
                    Select::JOIN_LEFT
                );
                $select->join(
                    ['v' => Tables::SYS_T_TEMPLATES],
                    sprintf('v.id = %s.view_id', Tables::CNT_T_DOCUMENTS),
                    ['view' => 'identifier'],
                    Select::JOIN_LEFT
                );

            /** @var PredicateSet $predicateSet */
                $predicateSet = new PredicateSet;

            /** @var Predicate $predicate */
                $predicate = new Predicate;
                $predicate->equalTo('cnt_t_documents.uri', $uri);
                $predicateSet->addPredicate($predicate);

                if (! is_null($ancestor)) {
                    /** @var Predicate $predicate */
                    $predicate = new Predicate;
                    $predicate->equalTo('d.uri', $ancestor);
                    $predicateSet->addPredicate($predicate);
                }

                $select->where($predicateSet);
            });

        return $resultSet->current();
    }

    /**
     * @param $id
     * @return Document
     * @throws \Exception
     */
    public function getDocument($id)
    {
        /** @var int $id */
        $id = (int) $id;

        /** @var ResultSet $resultSet */
        $resultSet = $this->getTableGateway()->select(['id' => $id]);

        /** @var Document $row */
        $row = $resultSet->current();

        if (! $row) {
            throw new \Exception("Could not find row $id");
        }

        return $row;
    }

    /**
     * @param Document $document
     * @throws \Exception
     */
    public function save(Document $document)
    {
        /** @var array $data */
        $data = [
            'name' => $document['name'],
            'uri' => $document['uri'],
            'document_type_id' => $document['document_type_id']
        ];

        /** @var int $id */
        $id = (int) $document['id'];

        if (! $id) {
            $this->getTableGateway()
                ->insert($data);
        } else {
            if ($this->getDocument($id)) {
                $this->getTableGateway()
                    ->update($data, ['id' => $id]);
            } else {
                throw new \Exception('Document id does not exist');
            }
        }
    }

    /**
     * @param $id
     */
    public function deleteDocument($id)
    {
        $this->delete($id);
    }
}
